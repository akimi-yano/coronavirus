{"version":3,"sources":["components/Prediction.jsx","App.js","serviceWorker.js","index.js"],"names":["Prediction","useState","state","setState","country","setCountry","province","setProvince","prediction","setPrediction","useEffect","Axios","get","then","response","data","catch","error","console","log","onSubmit","e","preventDefault","name","onChange","target","value","countries","map","item","index","find","elem","provinces","length","type","predictions","confirmed","fatalities","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oRAuFeA,EApFI,WAAO,IAAD,EACKC,qBADL,mBACdC,EADc,KACPC,EADO,OAESF,qBAFT,mBAEdG,EAFc,KAELC,EAFK,OAGWJ,qBAHX,mBAGdK,EAHc,KAGJC,EAHI,OAIeN,qBAJf,mBAIdO,EAJc,KAIFC,EAJE,KAKrBC,qBAAU,WACNC,IAAMC,IAAI,8DACLC,MAAK,SAAAC,GACFX,EAASW,EAASC,SAGrBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QACjC,IAaH,OACI,6BACI,0DADJ,oBAEsBb,EAClB,0BAAMgB,SAfQ,SAACC,GACnBA,EAAEC,iBACFX,IAAMC,IAAI,iFACIR,IAAaE,EAAQ,oBAAgBA,GAAa,KAC3DO,MAAK,SAAAC,GACFL,EAAcK,EAASC,SAG1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAQd,MAATf,EACG,6BAEI,4BAAQqB,KAAK,UAAUC,SAAU,SAAAH,GAC7BhB,EAAWgB,EAAEI,OAAOC,OACpBnB,EAAY,QAFhB,IAIK,4BAAQmB,MAAM,IAAd,wBAJL,IAKHxB,EAAMyB,UAAUC,KAAI,SAACC,EAAMC,GAAP,OACZ,4BAAQJ,MAAOG,EAAKN,MAAOM,EAAKN,UAIzB,MAAXnB,GAAmBF,EAAMyB,UAAUI,MAAK,SAAAC,GAAI,OAAEA,EAAKT,MAAMnB,KAAS6B,UAAUC,OAAS,EACtF,6BAEA,4BAAQX,KAAK,WAAWC,SAAU,SAAAH,GAAC,OAAId,EAAYc,EAAEI,OAAOC,SAA5D,IACK,4BAAQA,MAAM,IAAd,yBADL,IAEnBxB,EAAMyB,UAAUI,MAAK,SAAAC,GAAI,OAAEA,EAAKT,MAAMnB,KAAS6B,UAAUL,KAAI,SAACC,EAAMC,GAAP,OACrC,4BAAQJ,MAAOG,EAAKN,MAAOM,EAAKN,WAInC,IAEJ,GAeN,4BAAQY,KAAK,UAAb,YAEC3B,EAAaA,EAAW4B,YAAYR,KAAI,SAACC,EAAMC,GAAP,OACzC,6BAChB,yDAA+BD,EAAKQ,WACpC,oDAA0BR,EAAKS,gBAGb,K,MCjEHC,MAXf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACpB,6BACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,cAAcC,UAAW3C,OCEvB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0C,c","file":"static/js/main.1812acdc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Axios from 'axios'\n\nconst Prediction = () => {\n    const [state, setState] = useState()\n    const [country, setCountry] = useState()\n    const [province, setProvince] = useState()\n    const [prediction, setPrediction] = useState()\n    useEffect(() => {\n        Axios.get('https://coronavirus-kaggle.azurewebsites.net/api/locations')\n            .then(response => {\n                setState(response.data)\n            })\n\n            .catch(error => console.log(error));\n    }, [])\n\n    const getPrediction = (e) => {\n        e.preventDefault()\n        Axios.get('https://coronavirus-kaggle.azurewebsites.net/api/predictAll'\n        + `?country=${country}` + (province ? `&province=${province}` : \"\"))\n            .then(response => {\n                setPrediction(response.data)\n            })\n\n            .catch(error => console.log(error));\n    }\n\n    return (\n        <div>\n            <p>choose a country to predict</p>\n            Current country: {country}\n            <form onSubmit={getPrediction}>\n                {state != null ?\n                    <div>\n\n                        <select name=\"country\" onChange={e => {\n                            setCountry(e.target.value)\n                            setProvince(null)\n                            }}>\n                            (<option value=\"\">--select a country--</option>)\n                    {state.countries.map((item, index) =>\n                            (<option value={item.name}>{item.name}</option>)\n                        )}\n                        </select>\n\n                        {country != null && state.countries.find(elem=>elem.name==country).provinces.length > 0 ?\n                        <div>\n\n                        <select name=\"province\" onChange={e => setProvince(e.target.value)}>\n                            (<option value=\"\">--select a province--</option>)\n    {state.countries.find(elem=>elem.name==country).provinces.map((item, index) =>\n                            (<option value={item.name}>{item.name}</option>)\n                        )}\n                        </select>\n                        </div>\n                        : \"\"}\n                    </div>\n                    : \"\"}\n                {/* {state != null ? state.countries.map((item, index) => (\n\n                            <div>\n                    <select name=\"country\">\n                                <option vallue=\"{item.name}\">{item.name}</option>\n                </select>\n                {item.provinces.length ? item.provinces.map((option, idx) => (\n                                    <select name=\"province\">\n                                        <option vallue=\"{option.name}\">{option.name}</option>\n                                    </select>\n                                )) : null}\n                                </div>\n                                )) : \"\"} */}\n\n                <button type=\"submit\">Predict</button>\n            </form>\n                {prediction ? prediction.predictions.map((item, index) =>\n                <div>\n<p>Predicted Confirmed Cases: {item.confirmed}</p>\n<p>Predicted Fatalities: {item.fatalities}</p>\n</div>\n                )\n                : \"\"}\n\n        </div>\n    )\n}\n\nexport default Prediction\n","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport Prediction from './components/Prediction'\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n     <div>\n      <Route exact path=\"/\" component={Prediction} />\n      <Route path=\"/prediction\" component={Prediction} />\n     </div>\n    </HashRouter>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}